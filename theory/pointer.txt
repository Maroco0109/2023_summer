Chapter 11. 포인터(https://wikidocs.net/27205)
1. 포인터 변수
컴퓨터의 주 메모리는 바이트 단위, 즉 8비트 크기의 정보를 저장할 수 있는 단위로 나뉜다.
각 바이트는 고유한 주소를 가지므로 모든 바이트들은 주소를 통해 메모리 내에서 구분된다.

포인터: 주소, 포인터 변수: 주소를 저장해줄 수 있는 변수

포인터 변수 선언
int *p;
int* p;     //포인터는 이름 앞보다는 형에 붙는 것이 가독성에 도움이 된다.
=> p가 int형을 갖는 개체를 가리키는 포인터 변수이다.
C에서는 모든 포인터 변수가 오로지 특정 형의 개체(참조형, refernece type)를 가리키도록 강제한다.

2. 주소 및 참조 연산자
주소 연산자(&)
포인터 변수 선언: 포인터를 위한 공간은 설정해주지만, 특정 개체를 가리키지 않음.
포인터 변수 초기화: 변수의 주소를 &연산자를 통해 할당
int i;
int* p;
p = &i;     //i의 주소를 p에 할당해서 p는 i를 가리키게 된다.

참조 연산자(*)
포인터 변수가 개체를 가리키고 있다면, 참조 연산자를 통해 개체가 갖는 값에 접근 가능.
printf("%d\n", *p);     //p가 i를 가리키고 있을 때
=> p가 i를 가리키는 한, *p는 i에 대한 가명(alias). *p = i, *p값 수정 시 i 값도 수정됨.

[주의사항]
초기화하지 않은 포인터 변수에 참조 연산자(*)를 절대 사용해서는 안된다.
초기화하지 않은 변수에 대해 *변수 값을 할당하는 것 또한 위험하다. 해당 변수가 유효한 메모리 주소를 값으로 가지면, 주소에 저장된 자료를 수정할 수 있음.

3. 포인터 할당
C는 자료형이 같으면 할당 연산자가 포인터를 복사하는것을 허용.
int i;
int j;
int* p;
int* q;
p = &i;
q = p;      //포인터 할당문

4. 입력변수로서 포인터
입력 변수로 받은 변수는 값에 의해 전달되기 때문에 원본 변수의 값은 변하지 않음.
함수에 입력변수로 변수가 아닌 &변수, 즉 포인터를 전달하여 문제 해결.
