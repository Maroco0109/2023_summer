스택(Stack)과 힙(Heap)

메모리 구조
프로그램이 실행되기 위해서는 프로그램이 메모리에 로드 되어야 함
변수를 저장할 메모리도 필요
운영체제는 프로그램의 실행을 위해 다양한 메모리 공간 제공
1. 코드 영역
프로그램의 코드가 저장되는 영역
CPU는 코드 영역에 저장된 명령어를 하나씩 처리
2. 데이터 영역
프로그램의 전역 변수와 정적(static)변수가 저장되는 영역
프로그램 시작과 함께 할당되며, 프로그램 종료시 소멸

3. 스택 영역
함수 호출과 관계되는 지역 변수와 매개 변수가 저장되는 영역
함수의 호출과 함께 할당되며, 함수 호출 완료시 소멸

스택 영역에 저장되는 함수의 호출 정보: 스택 프레임(stack frame)

push 동작으로 데이터 저장, pop 동작으로 데이터 인출
후입 선출(LIFO, Last-In First-Out)방식으로 동작, 가장 늦게 저장된 데이터가 먼저 인출

메모리의 높은 주소에서 낮은 주소 방향으로 할당

장단점

매우 빠른 액세스
변수를 명시적으로 할당 해제 할 필요가 없음
공간은 CPU에 의해 효율적으로 관리되고, 메모리는 *단편화 되지 않음

지역 변수만 사용
스택 크기 제한
변수의 크기 조정 불가

*단편화: 기억장치의 빈 공간 또는 자료가 여러개의 조각으로 나뉘는 형상

4. 힙 영역
사용자가 직접 관리하는 메모리 영역
사용자에 의해 메모리 공간이 동적으로 할당되고 해제됨

낮은 주소에서 높은 주소의 방향으로 할당

장단점

변수를 전역적으로 액세스 가능
메모리 크기 제한 없음

상대적으로 느린 액세스효율적 공간 사용을 보장하지 못하는 경우 메모리 블록이 할당된 후 시간이 지남에 따라 메모리가 조각화되어 해제될 수 있음
메모리를 관리해야함(변수를 할당하고 해제하는 책임)