Heap(자료구조): 여러개의 값 중에서 가장 크거나 작은 값을 빠르게 찾기 위해 만든 이진트리

부모 노드의 값은 항상 자식 노드들의 값보다 크거나 작아야 한다.

완전 이진트리의 구조를 갖기 때문에 트링의 레벨이 늘어날 수록 노드의 수는 두배씩 증가
레벨이 i라면 노드수는 2^i-1개이다.
트리의 높이는 log2(i_+1)이다.

데이터 삽입
1. 가장 끝(자식 노드의 끝)에 노드를 삽입
2. 그 노드와 부모 노드를 비교
3. if 규칙 O => 그대로, else => 부모 노드와 그 노드 교환    //부모노드는 삽입된 위치의 인덱스 번호에서 /2를 하면 쉽게 구할 수 있다
4. 규칙에 부합할 때 까지 반복

데이터 삭제
최댓값 혹은 최솟값이 저장된 루트 노드만 제거 가능
1. 루트 노드 제거
2. 루트 자리에 가장 마지막 노드 삽입(자식 노드 최말단)
3. 올라간 노드와 자식 노드들 비교
4. if 규칙 O => 그대로, else => 부모 노드와 그 노드 교환
- 최대 힙
부모보다 더 큰 자식이 없으면 종료
부모보다 더 큰 자식이 하나 뿐이면 그 자식과 교환하고 종료
부모보다 더 큰 자식이 둘 있으면 자식들 중 큰 값과 교환하고 종료
- 최소 힙
부모보다 더 작은 자식이 없으면 종료
부모보다 더 작은 자식이 하나 뿐이면 그 자식과 교환하고 종료
부모보다 더 작은 자식이 둘 있으면 자식들 중 큰 값과 교환하고 종료